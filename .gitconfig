[alias]

  # I like using the interactive mode to make complex commits
  ai = add --interactive

  # All the aliases relate to commits. Note that
  # they are grouped by common prefixes, so I don't
  # confuse what I want done by accident.
  c = commit
  # commit with a message
  cm = commit -m
  cma = commit -a -m
  # amending the previous commit
  ca = commit --amend
  caa = commit -a --amend -C HEAD

  # reset
  ## soft resets
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  ## hard resets
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh1 = reset HEAD^^ --hard

  # shortcuts for commands
  s = status
  d = diff
  dc = diff --cached
  a = add
  co = checkout
  b = branch
  l = log
  f = fetch
  r = reset
  p = push
  cp = cherry-pick
  cb = rev-parse --abbrev-ref HEAD
  rbc = rebase --continue

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline --graph --decorate --abbrev-commit
  lg1 = log --graph --abbrev-commit --decorate --relative-date --format=format:'%C(auto)%h%C(reset) %C(white)%s%C(reset) %C(auto)%d%C(reset)%n''        %C(green)(%ar)%C(reset) %C(blue)%an%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = "!f() { git lg1 $*; }; f"

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  fixup = "!f() { git commit --fixup=\"$1\"; }; f"

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  rbi = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
  }; f"


[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[branch]

  autosetuprebase = always

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[credential]

  helper = osxkeychain

[diff]

  # Detect copies as well as renames
  renames = copies

[fetch]
  prune = true

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = kdiff3

[mergetool "kdiff3"]

  path = /Applications/kdiff3.app/Contents/MacOS/kdiff3

[mergetool]

  keepBackup = false


[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = simple

[rebase]
  autoSquash = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[user]
        name = Ufuk Kayserilioglu
        email = ufuk@paralaus.com

[github]
        user = paracycle

[ghi]
        token = !security find-internet-password -a paracycle -s github.com -l 'ghi token' -w

[ghi "highlight"]
        style = monokai
